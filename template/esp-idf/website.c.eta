<%~ await includeFile("../copyright", it) %>


#include "website.h"
#include <sys/param.h>

struct web_content
{
    size_t length;
    const char *data;
    bool compression;
    const char *content_type;
};

esp_err_t website_content_handler(httpd_req_t *req)
{
    int ret = 0;
    struct web_content *ctx = req->user_ctx;
    int remaining = ctx->length;

    httpd_resp_set_status(req, HTTPD_200);
    httpd_resp_set_type(req, ctx->content_type);
    if (ctx->compression)
    {
        httpd_resp_set_hdr(req, "Content-Encoding", "gzip");
    }
    while (remaining > 0)
    {
        /* Read the data for the request */
        ret = MIN(remaining, CHUNKSIZE);

        /* Send back the same data */
        httpd_resp_send_chunk(req, ctx->data + (ctx->length - remaining), ret);
        remaining -= ret;
    }
    httpd_resp_set_hdr(req, "Connection", "close");
    httpd_resp_send_chunk(req, NULL, 0);

    return ESP_OK;
}

<% for (const file of it.files) { %>
static const char <%= it.formatName(file.file) %>[] = {
<%~ await includeFile("../byteArray", {content: await it.getContent(file.file)}) %>

};

<% } %>
<% for (const file of it.files) { %>
static struct web_content st_ <%_ = it.formatName(file.file) %> = {
  .length = sizeof(<%= it.formatName(file.file) %>),
  .data = <%= it.formatName(file.file) %>,
  .compression = <%= file.file.endsWith('gz').toString() %>,
  .content_type = "<%= file.mime %>"
};

static const httpd_uri_t <%= it.formatName(file.file) _%> Page = {
  .uri       = "/<%= file.file.toLowerCase().endsWith('.gz') ? file.file.slice(0,-3) : file.file %>",
  .method    = HTTP_GET,
  .handler   = website_content_handler,
  .user_ctx  = &st_ <%_ = it.formatName(file.file) %>

};

<% if (file.file.toLowerCase().startsWith("index.html")) { %>
static const httpd_uri_t fallback_page = {
  .uri       = "*",
  .method    = HTTP_GET,
  .handler   = website_content_handler,
  .user_ctx  = &st_ <%_ = it.formatName(file.file) %>
};

<% } -%>
<% } -%>
void registerWebsite(httpd_handle_t server) {
<% for (const file of it.files) { %>
  httpd_register_uri_handler(server, & <%_ = it.formatName(file.file) _%> Page);
<% } %>
}

void regiterFallbackWebsite(httpd_handle_t server) {
  httpd_register_uri_handler(server, &fallback_page);
}

void unregisterFallbackWebsite(httpd_handle_t server) {
  httpd_unregister_uri_handler(server, fallback_page.uri, fallback_page.method);
}
